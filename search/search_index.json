{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Knowledge Base for the HuMon Research Lab","text":""},{"location":"#project-links","title":"Project Links","text":"<p>Click the following links to see documentation for projects by the HuMoN Lab</p> <ul> <li>Slackline Project Docs</li> </ul>"},{"location":"#repository-readme-links","title":"Repository ReadMe Links","text":"<ul> <li>FreeMoCap ReadMe</li> <li>Skellycam ReadMe</li> <li>Skelly_viewer ReadMe</li> <li>Skelly_synchronize ReadMe</li> <li>Cookie cutter repo ReadMe</li> </ul>"},{"location":"#page-info","title":"Page Info","text":"<p>The page is built via the <code>material</code> theme of mkdocs</p> <p>Documentation for <code>mkdocs</code> lives here -  mkdocs documentation</p> <p>Specifically the theme we are using lives here - material for mkdocs documentation</p>"},{"location":"useful-external-tutorials/","title":"Useful external tutorials","text":"<p>This page contains links to tutorials from external websites that lab members have found particularly useful, sorted by areas of interest,</p>"},{"location":"useful-external-tutorials/#documentation","title":"Documentation","text":"<ul> <li>Diataxis Framework documentation</li> <li>Real Python tutorial on using mkdocs</li> </ul>"},{"location":"useful-external-tutorials/#testing-code","title":"Testing Code","text":"<ul> <li>Real Python tutorial on testing</li> </ul>"},{"location":"how-to-guides/how-to-clone-a-github-repository/","title":"How to clone and run a Github repository","text":""},{"location":"how-to-guides/how-to-clone-a-github-repository/#tags-diataxis-how-to-pycharm-github-documentation","title":"tags: diataxis, how-to, pycharm, github, documentation","text":"<ol> <li>Install Pycharm <ul> <li>Community version is fine</li> </ul> </li> <li>Open Pycharm <ul> <li>NOTE - I'm not sure exactly what you will see the first time you open the program. Add a comment here if there is some step I skipped</li> </ul> </li> <li>In the top menu bar: Git &gt; Clone...<ul> <li>a window will pop up</li> <li>select the <code>Repository URL</code> tab in the left panel</li> <li>Set: <ul> <li>URL: The url of the repo<ul> <li>e.g. https://github.com/freemocap/freemocap</li> </ul> </li> <li>Directory:  The location on your computer where you want the contents of that repo to be cloned to<ul> <li>e.g. <code>C:\\Users\\jon\\freemocap</code></li> </ul> </li> </ul> </li> <li>Click <code>Clone</code> button in bottom right</li> <li>WAIT FOR IT TO COMPLETE IT'S STUFF BEFORE CLICKING AROUND<ul> <li>There's a status bar in the bottom or the window</li> </ul> </li> </ul> </li> <li>Assuming the repo has a <code>requirements.txt</code> file, PyCharm should pop up a little <code>Creating Virtual Environments Window</code> (if it doesn't, I'll make another How-To stub for how to set the python interpretter. hint, bottom right of screen):<ul> <li>Location: will be auto-set to <code>path to this rep\\ venv</code></li> <li>Base Interpreter:  will be set to your default Python installation</li> <li>Dependencies: will point to the <code>requirements.txt</code> file</li> <li>Click OK</li> <li>Let it do it's thing (status in bottom bar)</li> <li>It might take a while if there are a bunch of packages</li> <li>You should see something like <code>Python 3.10 {Name Of This Repo}</code> pop up in the bottom right</li> </ul> </li> <li>Test that it worked!<ul> <li>Open a Terminal window in Pycharm (click <code>Terminal</code> in the bottom left of screen)</li> <li>it should say <code>(venv)</code> on the left of each line (that means your interpreter is set to the <code>python</code> executable in the <code>venv\\</code> folder)</li> <li>enter the command <code>pip list</code> to check your installed packages</li> </ul> </li> </ol>"},{"location":"how-to-guides/how-to-setup-mkdocs-for-your-repo/","title":"How to setup mkdocs for your repo","text":""},{"location":"how-to-guides/how-to-setup-mkdocs-for-your-repo/#tags-diataxis-how-to-mkdocs-github-documentation","title":"tags: diataxis, how-to, mkdocs, github, documentation","text":""},{"location":"how-to-guides/how-to-setup-mkdocs-for-your-repo/#introduction","title":"Introduction","text":"<p>This guide explains how to set up mkdocs documentation for your existing repository. If you are instead looking to edit this pages documentation, see this guide instead.</p>"},{"location":"how-to-guides/how-to-setup-mkdocs-for-your-repo/#how-to-guide","title":"How to guide","text":"<ul> <li>First create a new conda environment in your terminal by running <code>conda create --name docs python=3.9</code>. Once that environment has been created, activate it with the command <code>conda activate docs</code>.</li> <li>Once your environment is installed and activated, install mkdocs and the material theme by running <code>pip install mkdocs mkdocs-material</code>.</li> <li>Navigate to the repo you want to create documentation for in your terminal by using the 'cd' command.</li> <li>Run the command <code>mkdocs new .</code> which creates a file <code>mkdocs.yml</code> and a <code>docs/</code> folder with a markdown file <code>index.md</code> in it (the period refers to the directory you're currently in).</li> <li>Edit the file <code>mkdocs.yml</code> in your ide of choice, so that:<ol> <li>the <code>site name</code> is changed to what you want your site to be called</li> <li>after site name, add an empty line, then on the next line add <code>theme:</code>, add another line, press tab to indent, and add <code>name: material</code></li> </ol> </li> <li>You can then add markdown content to <code>index.md</code> in the <code>docs</code> folder, which will be the landing page for your website, or add new markdown files to the folder. </li> <li>Before publishing, you may view your site by running <code>mkdocs serve</code> in your terminal. This will show you a local url you can put into your browser to view your site.</li> <li>Once you are happy with your site, build it by running <code>mkdocs build</code> in the terminal.</li> <li>Finally, run the command <code>mkdocs gh-deploy</code>. This should publish your website to your repository's github pages and show you a (now public) url to your site!</li> </ul>"},{"location":"how-to-guides/how-to-update-these-docs/","title":"How to update the humon lab docs","text":""},{"location":"how-to-guides/how-to-update-these-docs/#tags-diataxis-how-to-mkdocs-github-documentation","title":"tags: diataxis, how-to, mkdocs, github, documentation","text":""},{"location":"how-to-guides/how-to-update-these-docs/#background","title":"background","text":"<p>We're updating the docs that live on this repository-  repo for this website and are hosted via Github Pages at this URL - url for this website</p> <p>The page is built via the <code>material</code> theme of mkdocs</p> <p>mkdocs lives here -  mkdocs website</p> <p>Specifically the theme we are using lives here - mkdocs material theme</p> <p>This workflow is very similar to the one we will use to update the freemocap docs, except that the HuMoN Lab docs will be hosted via Github Pages while the freemocap docs are hosted via <code>readthedocs.io</code></p>"},{"location":"how-to-guides/how-to-update-these-docs/#how-to-guide-update-the-humon-research-lab-docs","title":"How to guide - Update the humon research lab docs","text":"<ul> <li>clone the repository on your computer using a terminal (I'm going to use a Windows Terminal, but it would look the same from any Command Prompt or powershell or whatever)<ul> <li>this assumes you gave <code>git</code> installed. If you don't google \"how to install git\"</li> </ul> </li> <li>in the terminal<ul> <li><code>cd</code> to the location you want to store the docs</li> <li>type `git clone https://github.com/HuMoN-Research-Lab/HuMoN-Research-Lab.github.io</li> </ul> </li> <li>open that folder in PyCharm<ul> <li>make sure to open the ENTIRE FOLDER, not  a file inside of it</li> </ul> </li> <li>make a branch off the <code>main</code> branch<ul> <li>call it [your_name]/[some_description_of_what_youre_doing]<ul> <li>no spaces</li> <li>keep it short, it doesn't matter</li> </ul> </li> </ul> </li> <li>Make a change to a document in the <code>/docs/</code> folder OR the configuration file <code>mkdocs.yml</code></li> <li>You can PREVIEW your changes by entering the command <code>mkdocs serve</code> in the terminal<ul> <li>after you've installed <code>mkdocs-material</code> via <code>pip install -r requirements.txt</code></li> </ul> </li> <li>add new pages by adding them to <code>nav</code> in the <code>mkdocs.yml</code> file<ul> <li>detailed instructions here</li> </ul> </li> <li>When you are happy with your changes:</li> <li>commit your branch to Github</li> <li>make a Pull Request (PR) onto the <code>main</code> branch</li> <li>When that PR is approved, it will automatically update the live docs site</li> </ul>"},{"location":"how-to-guides/how-to-upload-and-download-data-from-the-NAS/","title":"How to upload and download data from the NAS","text":"<p>This guide provides instructions on how to download/upload data that is collected in the office or lab. </p> <ol> <li>Navigate to quickconnect.to     -<ul> <li>QuickConnect ID: \"neumocaplab\"</li> <li>Username: \"numons\"</li> <li>Pass: Ask Michael, the keeper of secrets</li> </ul> </li> <li> <p>File Station (UPLOAD)     -</p> <ul> <li>All data will reside in \"NUMONs_Data\"</li> <li>Make a new folder using the YYYY-MM-DD convention of the date of collection. You may add a tag at the end for easy identification. <ul> <li>ie. 2030-01-29_aligator_run</li> </ul> </li> <li>Within the new folder, create another folder \"orginal_data\" and put in the data collected into this folder. </li> </ul> </li> </ol> <p>Reach out to mic.nguyen@northeastern.edu if you have any issues regarding accessing data</p>"},{"location":"how-to-guides/how-to-upload-and-download-data-from-the-NAS/#-if-uploading-processed-data-never-overwrite-original-data","title":"- IF UPLOADING PROCESSED DATA, NEVER OVERWRITE ORIGINAL DATA.","text":"<ul> <li>Make a new folder called \"processed_data\" and put it in there. </li> </ul>"},{"location":"meeting-notes/meeting-notes/","title":"2022-09-02 -  FreeMoCap Pair Programming","text":""}]}